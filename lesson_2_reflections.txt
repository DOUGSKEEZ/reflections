We’ve introduced a few new concepts since we last revisited our concept map.
git init
git add
git status
staging area
working directory

###########
What happens when you initialize a repository? Why do you need to do it?
-create .git to track changes and make commits

How is the staging area different from the working directory and the repository?
What value do you think it offers?
-staging area offers workspace to stage changes before committing them.  Intermediary between working dir and latest commit when you make changes.

How can you use the staging area to make sure you have one commit per logical
change?
git diff -staged
-review and add one logical change to the staging area from workign directory

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
-branches woul be helpful as you or a team work on seperate logical changes

How do the diagrams help you visualize the branch structure?
-diagrams help visualize what things interact with what.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- changes come together to review net changes made

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
- automatic merging removes human error, however may include unintended results
- Always doing merges manually allow for more direct knowledge and control over purposeful changes by the owner

##########

git diff (with no arguements) shows difference between Working Directory and Staging area
git diff --staged   shows difference between staging area and previous commit

git reset --hard    resets changes in working directory back to latest commit  (Not Reversable! Careful!)


How can you use the staging area to make sure you have one commit per logical change?
- Can review changes and add only logical changes using git add to staging area to be committed 
You may also want to commit your changes to the file. When you're ready to move on, click "Next" and Sarah will go over a concept called branching.

############


git branch    # shows branch
git checkout (name of branch)	#enters that branch

https://education.github.com/git-cheat-sheet-education.pdf

Thank you @Denyos
git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.